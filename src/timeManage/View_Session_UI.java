/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package timeManage;

import timeManage.*;
import com.mongodb.BasicDBObject;
import com.mongodb.BasicDBObjectBuilder;
import com.mongodb.DB;
import com.mongodb.DBCollection;
import com.mongodb.DBCursor;
import com.mongodb.DBObject;
import com.mongodb.WriteResult;
import com.mongodb.client.FindIterable;
import java.awt.Window;
import java.beans.Statement;
import java.net.UnknownHostException;
import java.sql.ResultSet;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.SwingUtilities;
import javax.swing.table.DefaultTableModel;
import javax.swing.text.Document;

/**
 *
 * @author NK
 */
public class View_Session_UI extends javax.swing.JPanel {

    String session_ID = null;
    String lecturers = null;
    String tag = null;
    String group_ID = null;
    String subject_Code = null;
    String subject = null;
    String scount = null;
    String duration = null;
    HashMap<String, String> lectureList = null;
    HashMap<String, String> subjectList = null;
    HashMap<String, String> sessionList = null;

    DataRetrive dbUtils = new DataRetrive();

    /**
     * Creates new form View_Subjects UI
     */
    public View_Session_UI() {
        initComponents();

        //load lectures from db     
        lectureList = getItemList("Employee ", "Employee ID", "Employee_Name");
        lectureList.forEach((k, v) -> {
//            System.out.println("lec" + lectureList);

            jComboBox2.addItem(v);
        });
        //load subjects from db
        subjectList = getItemList("Subjects ", "Subject Code", "SubjectName");
        subjectList.forEach((k, v) -> {
            // System.out.println("sub" + subjectList);

            jComboBox3.addItem(k);
        });

        //load sessions from db
        sessionList = getItemList("Sessions", "Session_ID", "Group_ID");
        sessionList.forEach((k, v) -> {
            // System.out.println("session:" + sessionList);

            jComboBox1.addItem(v);
        });

        //load data to search
        //get inputs
        //System.out.println("data from "+lecturers+subject_Code+group_ID);
        //populate data
        this.populate();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jButton3 = new javax.swing.JButton();
        jComboBox1 = new javax.swing.JComboBox<>();
        jComboBox2 = new javax.swing.JComboBox<>();
        jComboBox3 = new javax.swing.JComboBox<>();

        setBackground(new java.awt.Color(255, 255, 255));
        setPreferredSize(new java.awt.Dimension(620, 740));

        jLabel1.setFont(new java.awt.Font("Times New Roman", 1, 36)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(0, 0, 153));
        jLabel1.setText("VIEW - SESSION ");
        jLabel1.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jTable1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTable1MouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(jTable1);

        jButton3.setBackground(new java.awt.Color(255, 255, 255));
        jButton3.setFont(new java.awt.Font("Times New Roman", 1, 24)); // NOI18N
        jButton3.setForeground(new java.awt.Color(90, 173, 173));
        jButton3.setText("SEARCH");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jComboBox1.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Select By Group-ID", " " }));

        jComboBox2.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        jComboBox2.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Select By Lecturer", " " }));

        jComboBox3.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        jComboBox3.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Select By Subject", " " }));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1)
                        .addContainerGap())
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, 449, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jComboBox3, javax.swing.GroupLayout.PREFERRED_SIZE, 449, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 308, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jComboBox2, javax.swing.GroupLayout.PREFERRED_SIZE, 449, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 305, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 182, Short.MAX_VALUE))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addGap(18, 18, 18)
                .addComponent(jComboBox2, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(46, 46, 46)
                .addComponent(jComboBox3, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(50, 50, 50)
                .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(56, 56, 56)
                .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 65, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 71, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 244, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(39, 39, 39))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void jTable1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable1MouseClicked
        // what to do after a left click in a row

        DefaultTableModel tblModel = (DefaultTableModel) jTable1.getModel();

        session_ID = tblModel.getValueAt(jTable1.getSelectedRow(), 0).toString();
        lecturers = tblModel.getValueAt(jTable1.getSelectedRow(), 1).toString();
        tag = tblModel.getValueAt(jTable1.getSelectedRow(), 2).toString();
        group_ID = tblModel.getValueAt(jTable1.getSelectedRow(), 3).toString();
        subject_Code = tblModel.getValueAt(jTable1.getSelectedRow(), 4).toString();
        subject = tblModel.getValueAt(jTable1.getSelectedRow(), 5).toString();
        scount = tblModel.getValueAt(jTable1.getSelectedRow(), 6).toString();
        duration = tblModel.getValueAt(jTable1.getSelectedRow(), 7).toString();


    }//GEN-LAST:event_jTable1MouseClicked

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        // TODO add your handling code here:
        lecturers = jComboBox2.getSelectedItem().toString();
        subject_Code = jComboBox3.getSelectedItem().toString();
        group_ID = jComboBox1.getSelectedItem().toString();
        
        //get lec ID
        String lecID = dbUtils.getLecID(lecturers);

        

        //System.out.println("\n L:"+lecturers+"\n SCode:"+subject_Code+"\n GID:"+group_ID);
        //search session table
        ArrayList<Sessions> sessions = dbUtils.testSearch(subject_Code, group_ID, lecID);
        this.populateSearchedData(sessions);
        sessions.clear();

        //Get sessions which matches the student group
//        if(cursor != null){
//            while(cursor.hasNext()){
//                DBObject sessionObj = cursor.next();
//                if(sessionObj.get("Group_ID").equals(group_ID)){
//                        
//                    
//                    
//
////                    if(sessionObj.get("Session_ID") != null){
////                        sessionIdArray.add(sessionObj.get("Session_ID").toString());
////                    }
//                    
//                }
//            }
//        }

    }//GEN-LAST:event_jButton3ActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton3;
    private javax.swing.JComboBox<String> jComboBox1;
    private javax.swing.JComboBox<String> jComboBox2;
    private javax.swing.JComboBox<String> jComboBox3;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    // End of variables declaration//GEN-END:variables

    private static DBObject createRemoveDBObject(Subjects sub) {
        BasicDBObjectBuilder docBuilder = BasicDBObjectBuilder.start();
        docBuilder.append("Session_ID", sub.subjectCode);
        return docBuilder.get();
    }
//populate data

    private void populate() {

        String[] columNames = {"SID", "Lecturer(s)", "Tag", "Group-ID", "Subject-code", "Subject", "student-count", "Duration"};

        DefaultTableModel dtm = new DefaultTableModel(columNames, 0);
        DBCursor iterDoc = dbUtils.getAllSession();

        String lecID;
        String lecname;

        while (iterDoc.hasNext()) {
            DBObject obj = iterDoc.next();
            session_ID = (String) obj.get("Session_ID");
            String lecturers = obj.get("Lecturers").toString();
            System.out.println("lecturers :" + lecturers);
            lecturers = lecturers.replaceAll("[^a-zA-Z0-9,]", "");
            System.out.println("lecturers2::" + lecturers);
            String[] lecs = lecturers.split(",");
            System.out.println("lecs::" + lecs[0]);
            lecID = lecs[0];
            lecname = dbUtils.getLecName(lecID);

            System.out.println("lecname" + lecname);

            tag = (String) obj.get("Tag");
            group_ID = (String) obj.get("Group_ID");
            subject_Code = obj.get("Subject_Code").toString();
            subject = (String) obj.get("Subject").toString();
            scount = (String) obj.get("Student_Count").toString();
            duration = (String) obj.get("Duration").toString();
            int l = 0;
            // while(l > lecturers.length()){
            // System.out.println(lecturers);
            l++;

            // }
            dtm.addRow(new String[]{session_ID, lecname, tag, group_ID, subject_Code, subject, scount, duration});
//            System.out.println("code3" + code);
        }

        //load data to table (POPULATE DATA)
        jTable1.setModel(dtm);

    }
//populate data after search clicked

    private void populateSearchedData(ArrayList<Sessions> sessions) {

        String[] columNames = {"SID", "Lecturer(s)", "Tag", "Group-ID", "Subject-code", "Subject", "student-count", "Duration"};

        DefaultTableModel dtm = new DefaultTableModel(columNames, 0);

        String lecID;
        String lecname;
        for (Sessions s : sessions) {

            session_ID = s.getSessionID();
            String lecturers = s.getLecturers().toString();
            lecturers = lecturers.replaceAll("[^a-zA-Z0-9,]", "");
            String[] lecs = lecturers.split(",");
            lecID = lecs[0];
            lecname = dbUtils.getLecName(lecID);

            tag = s.getTags();
            group_ID = s.getGroupID();
            subject_Code = s.getSSubjectCode();
            subject = s.getSSubject();
            scount = s.getStudentCount();
            duration = s.getDuration();
            int l = 0;
            // while(l > lecturers.length()){
            System.out.println(lecturers);
            l++;

            // }
            dtm.addRow(new String[]{session_ID, lecname, tag, group_ID, subject_Code, subject, scount, duration});
//            System.out.println("code3" + code);
        }
        //load data to table (POPULATE DATA)
        jTable1.setModel(dtm);

    }

    private DBObject createDBObject(Sessions session) {
        BasicDBObjectBuilder docBuilder = BasicDBObjectBuilder.start();
        docBuilder.append("Session_ID", session.getSessionID());
        docBuilder.append("Lecturers", session.getLecturers());
        docBuilder.append("Tag", session.getTags());
        docBuilder.append("Group_ID", session.getGroupID());
        docBuilder.append("Subject_Code", session.getSSubjectCode());
        docBuilder.append("Subject", session.getSSubject());
        docBuilder.append("Student_Count", session.getStudentCount());
        docBuilder.append("Duration", session.getStudentCount());
        return docBuilder.get();
    }

    public void emptyFields() {
//        jTextField3.setText(null);
//        jTextField4.setText(null);
//        jComboBox1.setSelectedItem(null);
//        jComboBox2.setSelectedItem(null);
//        jSpinner1.setValue(0);
//        jSpinner2.setValue(0);
//        jSpinner3.setValue(0);
//        jSpinner4.setValue(0);
    }

    public HashMap<String, String> getItemList(String table_name, String id_col, String name_col) {

        DB database = null;
        HashMap<String, String> data = new HashMap<String, String>();

        try {
            database = DBManager.getDatabase();
        } catch (UnknownHostException ex) {
            JOptionPane.showMessageDialog(null, "Error When Connecting to DB");
        }

        //get sessions table data
        DBCollection coll = database.getCollection(table_name);
        DBCursor objects = coll.find();

        if (objects != null) {
            while (objects.hasNext()) {
                DBObject obj = objects.next();
                data.put(obj.get(id_col).toString(), obj.get(name_col).toString());
            }
        }
        return data;
    }

}
