/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package timeManage;

import com.mongodb.BasicDBObject;
import com.mongodb.BasicDBObjectBuilder;
import com.mongodb.DB;
import com.mongodb.DBCollection;
import com.mongodb.DBObject;
import com.mongodb.WriteResult;
import java.net.UnknownHostException;
import java.time.LocalTime;
import java.util.ArrayList;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import org.bson.conversions.Bson;

/**
 *
 * @author Thisura
 */
public class Settings extends javax.swing.JPanel {

    /**
     * Creates new form Settings
     */
    int numberOfWorkingDays = 0;
    DB SettingDB = null;
    DBCollection col=null;
    String startingtime="";
    String workingTime = "";
    String slot_time = "";
    
    public Settings() {
        initComponents();
        
        
        try
        {
        SettingDB = DBManager.getDatabase();
        }
        catch (UnknownHostException ex)
        {
        JOptionPane.showMessageDialog(null, "Error When Connecting to DB");
        }
        
        //get settings table data
        col = SettingDB.getCollection("Setting");
        
        BasicDBObject searchQuery = new BasicDBObject().append("SettingId", 2);
        DBObject settingsObject= col.findOne(searchQuery);
        
       if(settingsObject != null){
        
           //set values to ui components
            numberOfWorkingDays = (Integer)settingsObject.get("NoOfWorkingDays");
            txt_no_of_wrkng_days_p_week.setText(Integer.toString(numberOfWorkingDays));
            timePicker_starting_time.setText(settingsObject.get("StartTime").toString());

             startingtime=settingsObject.get("StartTime").toString();
             workingTime = settingsObject.get("WorkingTimePerDay").toString();
             slot_time = settingsObject.get("TimeSlot").toString();  
            
            String wrkngDays = settingsObject.get("WorkingDays").toString();

            if(wrkngDays.matches("(.*)MONDAY(.*)")){
                jCheckBox_monday.setSelected(true);
            }
            if(wrkngDays.matches("(.*)TUESDAY(.*)")){
                jCheckBox_tuesday.setSelected(true);
            }
            if(wrkngDays.matches("(.*)WEDNSDAY(.*)")){
                jCheckBox_wednsday.setSelected(true);
            }
            if(wrkngDays.matches("(.*)THURSDAY(.*)")){
                jCheckBox_thursday.setSelected(true);
            }
            if(wrkngDays.matches("(.*)FRIDAY(.*)")){
                jCheckBox_friday.setSelected(true);
            }
            if(wrkngDays.matches("(.*)SATURDAY(.*)")){
                jCheckBox_saturday.setSelected(true);
            }
            if(wrkngDays.matches("(.*)SUNDAY(.*)")){
                jCheckBox_sunday.setSelected(true);
            }

            String timeslot = settingsObject.get("TimeSlot").toString();
            
            if(timeslot.equals("ONE_HOUR") ){
                jRadioButton_time_slots_1hr.setSelected(true);
                }
            if(timeslot.equals("30_MINUTES")){
                jRadioButton_time_slot_30min.setSelected(true);
                }
            else{
                jRadioButton_time_slots_1hr.setSelected(true);
                }
            jComboBox1.setSelectedItem(settingsObject.get("WorkingTimePerDay"));
            
            
            //show time slots in a table
            generateTimeSlotsTable(startingtime,workingTime,slot_time);
       }
       
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jCheckBox_sunday = new javax.swing.JCheckBox();
        jCheckBox_monday = new javax.swing.JCheckBox();
        jCheckBox_tuesday = new javax.swing.JCheckBox();
        jCheckBox_wednsday = new javax.swing.JCheckBox();
        jCheckBox_thursday = new javax.swing.JCheckBox();
        jCheckBox_friday = new javax.swing.JCheckBox();
        jCheckBox_saturday = new javax.swing.JCheckBox();
        txt_no_of_wrkng_days_p_week = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jRadioButton_time_slots_1hr = new javax.swing.JRadioButton();
        jRadioButton_time_slot_30min = new javax.swing.JRadioButton();
        btn_save = new javax.swing.JButton();
        jLabel7 = new javax.swing.JLabel();
        jComboBox1 = new javax.swing.JComboBox();
        jButton1 = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        timePicker_starting_time = new com.github.lgooddatepicker.components.TimePicker();

        setBackground(new java.awt.Color(255, 255, 255));

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        jLabel1.setText("SETTINGS");

        jLabel2.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel2.setText("Working Days");

        jCheckBox_sunday.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jCheckBox_sunday.setText("Sunday");
        jCheckBox_sunday.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBox_sundayActionPerformed(evt);
            }
        });

        jCheckBox_monday.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jCheckBox_monday.setText("Monday");
        jCheckBox_monday.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jCheckBox_mondayStateChanged(evt);
            }
        });
        jCheckBox_monday.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBox_mondayActionPerformed(evt);
            }
        });

        jCheckBox_tuesday.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jCheckBox_tuesday.setText("Tuesday");
        jCheckBox_tuesday.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBox_tuesdayActionPerformed(evt);
            }
        });

        jCheckBox_wednsday.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jCheckBox_wednsday.setText("Wednsday");
        jCheckBox_wednsday.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBox_wednsdayActionPerformed(evt);
            }
        });

        jCheckBox_thursday.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jCheckBox_thursday.setText("Thursday");
        jCheckBox_thursday.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBox_thursdayActionPerformed(evt);
            }
        });

        jCheckBox_friday.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jCheckBox_friday.setText("Friday");
        jCheckBox_friday.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBox_fridayActionPerformed(evt);
            }
        });

        jCheckBox_saturday.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jCheckBox_saturday.setText("Saturday");
        jCheckBox_saturday.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBox_saturdayActionPerformed(evt);
            }
        });

        txt_no_of_wrkng_days_p_week.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        txt_no_of_wrkng_days_p_week.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txt_no_of_wrkng_days_p_weekActionPerformed(evt);
            }
        });

        jLabel3.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel3.setText("Number of Working Days Per Week");

        jLabel4.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel4.setText("Working Time Per Day");

        jLabel5.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel5.setText("Time Slot Duration");

        jLabel6.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel6.setText("Starting Time");

        jRadioButton_time_slots_1hr.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jRadioButton_time_slots_1hr.setText("One Hour");
        jRadioButton_time_slots_1hr.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRadioButton_time_slots_1hrActionPerformed(evt);
            }
        });

        jRadioButton_time_slot_30min.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jRadioButton_time_slot_30min.setText("30Minutes");
        jRadioButton_time_slot_30min.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRadioButton_time_slot_30minActionPerformed(evt);
            }
        });

        btn_save.setFont(new java.awt.Font("Tahoma", 0, 16)); // NOI18N
        btn_save.setText("Save");
        btn_save.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_saveActionPerformed(evt);
            }
        });

        jLabel7.setForeground(new java.awt.Color(102, 102, 102));
        jLabel7.setText("hrs");

        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "05:00", "06:00", "07:00", "08:00", "09:00", "10:00", "11:00", "12:00" }));
        jComboBox1.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jComboBox1ItemStateChanged(evt);
            }
        });
        jComboBox1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jComboBox1MouseClicked(evt);
            }
        });
        jComboBox1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox1ActionPerformed(evt);
            }
        });
        jComboBox1.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                jComboBox1PropertyChange(evt);
            }
        });

        jButton1.setFont(new java.awt.Font("Tahoma", 0, 16)); // NOI18N
        jButton1.setText("Set Default");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jTable1.setFont(new java.awt.Font("Tahoma", 0, 16)); // NOI18N
        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Time Slots"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTable1.setRowHeight(24);
        jScrollPane1.setViewportView(jTable1);
        if (jTable1.getColumnModel().getColumnCount() > 0) {
            jTable1.getColumnModel().getColumn(0).setResizable(false);
        }

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(65, 65, 65)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel3)
                        .addGap(18, 18, 18)
                        .addComponent(txt_no_of_wrkng_days_p_week, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(0, 0, Short.MAX_VALUE)
                                .addComponent(jButton1)
                                .addGap(18, 18, 18)
                                .addComponent(btn_save, javax.swing.GroupLayout.PREFERRED_SIZE, 114, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(50, 50, 50)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jCheckBox_thursday)
                                            .addComponent(jCheckBox_sunday)
                                            .addComponent(jCheckBox_wednsday)
                                            .addComponent(jCheckBox_monday)
                                            .addComponent(jCheckBox_tuesday)
                                            .addComponent(jCheckBox_friday)
                                            .addComponent(jCheckBox_saturday)))
                                    .addComponent(jLabel2)
                                    .addComponent(jLabel1))
                                .addGap(138, 138, 138)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                            .addComponent(jLabel5)
                                            .addGap(42, 42, 42))
                                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jRadioButton_time_slots_1hr)
                                            .addComponent(jRadioButton_time_slot_30min)))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jLabel4)
                                            .addComponent(jLabel6))
                                        .addGap(9, 9, 9)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                            .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(timePicker_starting_time, javax.swing.GroupLayout.PREFERRED_SIZE, 118, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jLabel7)))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 59, Short.MAX_VALUE)
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 142, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(106, 106, 106))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(66, 66, 66)
                .addComponent(jLabel1)
                .addGap(41, 41, 41)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel5)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jRadioButton_time_slots_1hr)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jRadioButton_time_slot_30min)
                        .addGap(46, 46, 46)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel4)
                            .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel7)))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 316, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addGap(37, 37, 37)
                        .addComponent(jCheckBox_sunday)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jCheckBox_monday)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jCheckBox_tuesday)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jCheckBox_wednsday)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jCheckBox_thursday)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jCheckBox_friday)
                            .addComponent(jLabel6)
                            .addComponent(timePicker_starting_time, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jCheckBox_saturday)))
                .addGap(31, 31, 31)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txt_no_of_wrkng_days_p_week, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 51, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btn_save)
                    .addComponent(jButton1))
                .addGap(53, 53, 53))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void jCheckBox_sundayActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBox_sundayActionPerformed
        if(jCheckBox_sunday.isSelected()){
            String noOfWrkngDys = Integer.toString(++numberOfWorkingDays);
            txt_no_of_wrkng_days_p_week.setText(noOfWrkngDys);
        }else{
            String noOfWrkngDys = Integer.toString(--numberOfWorkingDays);
            txt_no_of_wrkng_days_p_week.setText(noOfWrkngDys);
        }
    }//GEN-LAST:event_jCheckBox_sundayActionPerformed

    private void jRadioButton_time_slots_1hrActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRadioButton_time_slots_1hrActionPerformed
        
        jRadioButton_time_slots_1hr.setSelected(true);
        jRadioButton_time_slot_30min.setSelected(false);
        
        slot_time = "ONE_HOUR";
        
        generateTimeSlotsTable(startingtime,workingTime,slot_time);
    }//GEN-LAST:event_jRadioButton_time_slots_1hrActionPerformed

    private static DBObject createDBObject(Setting setting_)
{
    //create Settings obect
            BasicDBObjectBuilder docBuilder = BasicDBObjectBuilder.start();
            docBuilder.append("SettingId", setting_.getSettingid());
            docBuilder.append("NoOfWorkingDays", setting_.getNoOfWorkingDays());
            docBuilder.append("WorkingDays", setting_.getWorkingDays());
            docBuilder.append("StartTime", setting_.getStartingTime());
            docBuilder.append("TimeSlot", setting_.getTimeSlot());
            docBuilder.append("WorkingTimePerDay", setting_.getWorkingTimePerDay());
             return docBuilder.get();
}
    
    private void btn_saveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_saveActionPerformed

        String[] workingDays = new String[7];
        int i=0;
        if(jCheckBox_sunday.isSelected()){
            workingDays[i++] = "SUNDAY";
        }
        if(jCheckBox_monday.isSelected()){
            workingDays[i++] = "MONDAY";
        }
        if(jCheckBox_tuesday.isSelected()){
            workingDays[i++] = "TUESDAY";
        }
        if(jCheckBox_wednsday.isSelected()){
            workingDays[i++] = "WEDNSDAY";
        }
        if(jCheckBox_thursday.isSelected()){
            workingDays[i++] = "THURSDAY";
        }
        if(jCheckBox_friday.isSelected()){
            workingDays[i++] = "FRIDAY";
        }
        if(jCheckBox_saturday.isSelected()){
            workingDays[i++] = "SATURDAY";
        }
        
        String workingTimePerDay = jComboBox1.getSelectedItem().toString();
        
        String timeSlot="";
        if(jRadioButton_time_slots_1hr.isSelected()){
            timeSlot = "ONE_HOUR";
        }
        else if(jRadioButton_time_slot_30min.isSelected()){
            timeSlot = "30_MINUTES";
        }
        
        String startTime = timePicker_starting_time.getTime().toString();
        
        //save data to DB
        if(numberOfWorkingDays>0){
            try {
            Setting setting = new Setting(2,numberOfWorkingDays,workingDays,startTime,timeSlot,workingTimePerDay);
            DBObject doc = createDBObject(setting);

            BasicDBObject searchQuery = new BasicDBObject().append("SettingId", 2);
            WriteResult updateResult = col.update(searchQuery,doc);
//            WriteResult updateResult = col.insert(doc);
           
            } catch (Exception e) {
                System.out.println(e);
                Notification notification = new Notification("Error when updating");
                notification.setLocation(600, 400);
                notification.setVisible(true);
            }
            
            Notification notification = new Notification("Successfully Updated");
            notification.setLocation(600, 400);
            notification.setVisible(true);
        }else{
            Notification notification = new Notification("Please Select working days");
            notification.setLocation(600, 400);
            notification.setVisible(true);
        }
        
    }//GEN-LAST:event_btn_saveActionPerformed

    private void txt_no_of_wrkng_days_p_weekActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txt_no_of_wrkng_days_p_weekActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txt_no_of_wrkng_days_p_weekActionPerformed

    private void jCheckBox_mondayStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jCheckBox_mondayStateChanged
       
    }//GEN-LAST:event_jCheckBox_mondayStateChanged

    private void jCheckBox_mondayActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBox_mondayActionPerformed
        if(jCheckBox_monday.isSelected()){
            String noOfWrkngDys = Integer.toString(++numberOfWorkingDays);
            txt_no_of_wrkng_days_p_week.setText(noOfWrkngDys);
        }else{
            String noOfWrkngDys = Integer.toString(--numberOfWorkingDays);
            txt_no_of_wrkng_days_p_week.setText(noOfWrkngDys);
        }
    }//GEN-LAST:event_jCheckBox_mondayActionPerformed

    private void jCheckBox_tuesdayActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBox_tuesdayActionPerformed
        if(jCheckBox_tuesday.isSelected()){
            String noOfWrkngDys = Integer.toString(++numberOfWorkingDays);
            txt_no_of_wrkng_days_p_week.setText(noOfWrkngDys);
        }else{
            String noOfWrkngDys = Integer.toString(--numberOfWorkingDays);
            txt_no_of_wrkng_days_p_week.setText(noOfWrkngDys);
        }
    }//GEN-LAST:event_jCheckBox_tuesdayActionPerformed

    private void jCheckBox_wednsdayActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBox_wednsdayActionPerformed
        if(jCheckBox_wednsday.isSelected()){
            String noOfWrkngDys = Integer.toString(++numberOfWorkingDays);
            txt_no_of_wrkng_days_p_week.setText(noOfWrkngDys);
        }else{
            String noOfWrkngDys = Integer.toString(--numberOfWorkingDays);
            txt_no_of_wrkng_days_p_week.setText(noOfWrkngDys);
        }
    }//GEN-LAST:event_jCheckBox_wednsdayActionPerformed

    private void jCheckBox_thursdayActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBox_thursdayActionPerformed
        if(jCheckBox_thursday.isSelected()){
            String noOfWrkngDys = Integer.toString(++numberOfWorkingDays);
            txt_no_of_wrkng_days_p_week.setText(noOfWrkngDys);
        }else{
            String noOfWrkngDys = Integer.toString(--numberOfWorkingDays);
            txt_no_of_wrkng_days_p_week.setText(noOfWrkngDys);
        }
    }//GEN-LAST:event_jCheckBox_thursdayActionPerformed

    private void jCheckBox_fridayActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBox_fridayActionPerformed
        if(jCheckBox_friday.isSelected()){
            String noOfWrkngDys = Integer.toString(++numberOfWorkingDays);
            txt_no_of_wrkng_days_p_week.setText(noOfWrkngDys);
        }else{
            String noOfWrkngDys = Integer.toString(--numberOfWorkingDays);
            txt_no_of_wrkng_days_p_week.setText(noOfWrkngDys);
        }
    }//GEN-LAST:event_jCheckBox_fridayActionPerformed

    private void jCheckBox_saturdayActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBox_saturdayActionPerformed
        if(jCheckBox_saturday.isSelected()){
            String noOfWrkngDys = Integer.toString(++numberOfWorkingDays);
            txt_no_of_wrkng_days_p_week.setText(noOfWrkngDys);
        }else{
            String noOfWrkngDys = Integer.toString(--numberOfWorkingDays);
            txt_no_of_wrkng_days_p_week.setText(noOfWrkngDys);
        }
    }//GEN-LAST:event_jCheckBox_saturdayActionPerformed

    private void jRadioButton_time_slot_30minActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRadioButton_time_slot_30minActionPerformed
        jRadioButton_time_slots_1hr.setSelected(false);
        jRadioButton_time_slot_30min.setSelected(true);
        
        slot_time = "30_MINUTES";
        
        generateTimeSlotsTable(startingtime,workingTime,slot_time);
    }//GEN-LAST:event_jRadioButton_time_slot_30minActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        
        //handle default button
        
        try
        {
        SettingDB = DBManager.getDatabase();
        }
        catch (UnknownHostException ex)
        {
        JOptionPane.showMessageDialog(null, "Error When Connecting to DB");
        }
        col = SettingDB.getCollection("Setting");
        
        BasicDBObject searchQuery = new BasicDBObject().append("SettingId", 1);
        DBObject settingsObject= col.findOne(searchQuery);
        
        clearAllSettings();
        
       if(settingsObject != null){
        
            numberOfWorkingDays = (Integer)settingsObject.get("NoOfWorkingDays");
            txt_no_of_wrkng_days_p_week.setText(Integer.toString(numberOfWorkingDays));
            timePicker_starting_time.setText(settingsObject.get("StartTime").toString());
 
             startingtime=settingsObject.get("StartTime").toString();
             workingTime = settingsObject.get("WorkingTimePerDay").toString();
             slot_time = settingsObject.get("TimeSlot").toString();  
            
            String wrkngDays = settingsObject.get("WorkingDays").toString();

            if(wrkngDays.matches("(.*)MONDAY(.*)")){
                jCheckBox_monday.setSelected(true);
            }
            if(wrkngDays.matches("(.*)TUESDAY(.*)")){
                jCheckBox_tuesday.setSelected(true);
            }
            if(wrkngDays.matches("(.*)WEDNSDAY(.*)")){
                jCheckBox_wednsday.setSelected(true);
            }
            if(wrkngDays.matches("(.*)THURSDAY(.*)")){
                jCheckBox_thursday.setSelected(true);
            }
            if(wrkngDays.matches("(.*)FRIDAY(.*)")){
                jCheckBox_friday.setSelected(true);
            }
            if(wrkngDays.matches("(.*)SATURDAY(.*)")){
                jCheckBox_saturday.setSelected(true);
            }
            if(wrkngDays.matches("(.*)SUNDAY(.*)")){
                jCheckBox_sunday.setSelected(true);
            }

            String timeslot = settingsObject.get("TimeSlot").toString();
            if(timeslot.equals("ONE_HOUR") ){
                jRadioButton_time_slots_1hr.setSelected(true);
            }
            if(timeslot.equals("30_MINUTES")){
                jRadioButton_time_slot_30min.setSelected(true);
            }
            else{
                jRadioButton_time_slots_1hr.setSelected(true);
            }
            jComboBox1.setSelectedItem(settingsObject.get("WorkingTimePerDay"));
            generateTimeSlotsTable(startingtime,workingTime,slot_time);
       }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jComboBox1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox1ActionPerformed
        workingTime = jComboBox1.getSelectedItem().toString();
        generateTimeSlotsTable(startingtime,workingTime,slot_time);
        
    }//GEN-LAST:event_jComboBox1ActionPerformed

    private void jComboBox1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jComboBox1MouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_jComboBox1MouseClicked

    private void jComboBox1ItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jComboBox1ItemStateChanged
        // TODO add your handling code here:
    }//GEN-LAST:event_jComboBox1ItemStateChanged

    private void jComboBox1PropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_jComboBox1PropertyChange
        // TODO add your handling code here:
        
    }//GEN-LAST:event_jComboBox1PropertyChange

    private void timePicker_starting_timePropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_timePicker_starting_timePropertyChange
        try {
            startingtime = timePicker_starting_time.getTime().toString();
         generateTimeSlotsTable(startingtime,workingTime,slot_time);
        } catch (Exception e) {
        }
    }//GEN-LAST:event_timePicker_starting_timePropertyChange
  
    public void generateTimeSlotsTable(String starttime, String noOfWorkingTime, String timeslot){
     
        // show time slots in a table
        String[] parts = starttime.split(":");
        int time = Integer.parseInt(parts[0])*60+Integer.parseInt(parts[1]);
        String[] partss = noOfWorkingTime.split(":");
        int workingTime = Integer.parseInt(partss[0])*60+Integer.parseInt(partss[1]);
        
        int end = time+workingTime;
        
        int slottime ;
        if(timeslot.equals("30_MINUTES")){
            slottime = 30;
        }else{
            slottime = 60;
        }
        
        ArrayList<String> time_slots_arr = new ArrayList<String>();
        
        
        
        while(time< end){
            String start_h = String.valueOf(time/60);
            if(start_h.length()<2){
                start_h = "0"+start_h;
            }
            String start_m = String.valueOf(time%60);
            if(start_m.length()<2){
                start_m = start_m+"0";
            }
            String end_h = String.valueOf((time+slottime)/60);
            if(end_h.length()<2){
                end_h = "0"+end_h;
            }
            String end_m = String.valueOf((time+slottime)%60);
            if(end_m.length()<2){
                end_m = end_m+"0";
            }
            String slot = start_h+":"+start_m+" - "+end_h+":"+end_m;
            time_slots_arr.add(slot);
            time = time+slottime;
        }
        
        DefaultTableModel model = (DefaultTableModel)jTable1.getModel();
        
        model.setRowCount(0);
        int a=0;
        while(a<time_slots_arr.size()){
            model.addRow(new Object[]{time_slots_arr.get(a++)});
        }
        
    }
    
    public void clearAllSettings(){
        jCheckBox_monday.setSelected(false);
        jCheckBox_tuesday.setSelected(false);
        jCheckBox_wednsday.setSelected(false);
        jCheckBox_thursday.setSelected(false);
        jCheckBox_friday.setSelected(false);
        jCheckBox_saturday.setSelected(false);
        jCheckBox_sunday.setSelected(false);
        jRadioButton_time_slots_1hr.setSelected(false);
        jRadioButton_time_slot_30min.setSelected(false);
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btn_save;
    private javax.swing.JButton jButton1;
    private javax.swing.JCheckBox jCheckBox_friday;
    private javax.swing.JCheckBox jCheckBox_monday;
    private javax.swing.JCheckBox jCheckBox_saturday;
    private javax.swing.JCheckBox jCheckBox_sunday;
    private javax.swing.JCheckBox jCheckBox_thursday;
    private javax.swing.JCheckBox jCheckBox_tuesday;
    private javax.swing.JCheckBox jCheckBox_wednsday;
    private javax.swing.JComboBox jComboBox1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JRadioButton jRadioButton_time_slot_30min;
    private javax.swing.JRadioButton jRadioButton_time_slots_1hr;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    private com.github.lgooddatepicker.components.TimePicker timePicker_starting_time;
    private javax.swing.JTextField txt_no_of_wrkng_days_p_week;
    // End of variables declaration//GEN-END:variables
}
