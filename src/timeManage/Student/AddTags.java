/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package timeManage.Student;

import timeManage.DBManager;
import com.mongodb.BasicDBObject;
import com.mongodb.BasicDBObjectBuilder;
import com.mongodb.DB;
import com.mongodb.DBCollection;
import com.mongodb.DBCursor;
import com.mongodb.DBObject;
import com.mongodb.WriteResult;
import java.net.UnknownHostException;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import org.bson.types.ObjectId;

/**
 *
 * @author Vinoth
 */
public class AddTags extends javax.swing.JPanel {
         ObjectId ID;
    /**
     * Creates new form AddTags
     */
    public AddTags() {
        initComponents();
         displayTable1();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        tagTxt = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        tagList = new javax.swing.JTable();
        AddButton = new javax.swing.JButton();
        EditButton = new javax.swing.JButton();
        RemoveButton = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        AddYearButton = new javax.swing.JButton();
        CreateSubGrpButton = new javax.swing.JButton();
        CreateGrpButton = new javax.swing.JButton();

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));
        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Add Tags", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 24))); // NOI18N

        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel1.setText("Tag");

        tagTxt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tagTxtActionPerformed(evt);
            }
        });

        tagList.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "id", "Tag"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.String.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        tagList.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tagListMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tagList);

        AddButton.setBackground(new java.awt.Color(102, 255, 204));
        AddButton.setText("Add");
        AddButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AddButtonActionPerformed(evt);
            }
        });

        EditButton.setBackground(new java.awt.Color(153, 255, 204));
        EditButton.setText("Edit");
        EditButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                EditButtonActionPerformed(evt);
            }
        });

        RemoveButton.setBackground(new java.awt.Color(255, 102, 102));
        RemoveButton.setText("Remove");
        RemoveButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RemoveButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(47, 47, 47)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(38, 38, 38)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(RemoveButton, javax.swing.GroupLayout.DEFAULT_SIZE, 165, Short.MAX_VALUE)
                    .addComponent(EditButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(AddButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(tagTxt))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 278, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(96, 96, 96))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(141, 141, 141)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(tagTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(28, 28, 28)
                        .addComponent(AddButton, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(27, 27, 27)
                        .addComponent(EditButton, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(78, 78, 78)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 291, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(2, 2, 2)
                .addComponent(RemoveButton, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(44, Short.MAX_VALUE))
        );

        jPanel3.setBackground(new java.awt.Color(255, 255, 255));

        AddYearButton.setBackground(new java.awt.Color(153, 153, 255));
        AddYearButton.setFont(new java.awt.Font("Tahoma", 0, 16)); // NOI18N
        AddYearButton.setForeground(new java.awt.Color(255, 255, 255));
        AddYearButton.setText("Add Year&Semester");
        AddYearButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AddYearButtonActionPerformed(evt);
            }
        });

        CreateSubGrpButton.setBackground(new java.awt.Color(102, 102, 255));
        CreateSubGrpButton.setFont(new java.awt.Font("Tahoma", 0, 16)); // NOI18N
        CreateSubGrpButton.setForeground(new java.awt.Color(255, 255, 255));
        CreateSubGrpButton.setText("Create SubGroup ID");
        CreateSubGrpButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CreateSubGrpButtonActionPerformed(evt);
            }
        });

        CreateGrpButton.setBackground(new java.awt.Color(102, 51, 255));
        CreateGrpButton.setFont(new java.awt.Font("Tahoma", 0, 16)); // NOI18N
        CreateGrpButton.setForeground(new java.awt.Color(255, 255, 255));
        CreateGrpButton.setText("Create GroupID");
        CreateGrpButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CreateGrpButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(59, 59, 59)
                .addComponent(AddYearButton, javax.swing.GroupLayout.PREFERRED_SIZE, 303, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(80, 80, 80)
                .addComponent(CreateSubGrpButton, javax.swing.GroupLayout.PREFERRED_SIZE, 303, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(75, 75, 75)
                .addComponent(CreateGrpButton, javax.swing.GroupLayout.PREFERRED_SIZE, 303, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(AddYearButton, javax.swing.GroupLayout.PREFERRED_SIZE, 64, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(CreateSubGrpButton, javax.swing.GroupLayout.PREFERRED_SIZE, 64, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(CreateGrpButton, javax.swing.GroupLayout.PREFERRED_SIZE, 64, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(39, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void tagTxtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tagTxtActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_tagTxtActionPerformed

    private void tagListMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tagListMouseClicked
        // TODO add your handling code here:
        DefaultTableModel model = (DefaultTableModel) tagList.getModel();
        int selectedIndex = tagList.getSelectedRow();
        ID= (ObjectId) model.getValueAt(selectedIndex,0);
        tagTxt.setText(model.getValueAt(selectedIndex, 1).toString());

    }//GEN-LAST:event_tagListMouseClicked

    private void AddButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AddButtonActionPerformed
        // TODO add your handling code here:
        try{
            String t1 = tagTxt.getText();
            if (t1.length() == 0)
            {
                JOptionPane.showMessageDialog(null, "Enter the Tag");
            }
            else{

                Tag tag = new Tag(t1);

                DBObject doc = createDBObject(tag);
                DB MyDb = null;

                try
                {
                    MyDb = DBManager.getDatabase();
                }
                catch (UnknownHostException ex)
                {
                    JOptionPane.showMessageDialog(null, "Error When Connecting to DB");
                }
                DBCollection col = MyDb.getCollection("Tag");

                BasicDBObject theQuery = new BasicDBObject("tag", t1);
                DBObject result = col.findOne(theQuery);

                if(result==null){
                    WriteResult result1 = col.insert(doc);
                    JOptionPane.showMessageDialog(null, "added Successfully");

                    tagTxt.setText(null);

                    displayTable1();

                }
                else{
                    JOptionPane.showMessageDialog(null, "Already Added");
                }}} catch (Exception e)
                {
                    JOptionPane.showMessageDialog(null, "Insertion Failed  please Fill Details to add!" + e.toString());

                }

    }//GEN-LAST:event_AddButtonActionPerformed

    private void EditButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_EditButtonActionPerformed
        // TODO add your handling code here:
        try
        {
            String tag = tagTxt.getText();

            if (tag.length() == 0)
            {
                JOptionPane.showMessageDialog(null, "Tag is Mandatory");
            }
            else
            {
                //Check if name is there in DB
                DB MyDb = null;
                try
                {
                    MyDb = DBManager.getDatabase();
                }
                catch (UnknownHostException e)
                {
                    JOptionPane.showMessageDialog(null, "Error When Connecting to DB : " + e);
                }
                DBCollection col = MyDb.getCollection("Tag");
                BasicDBObject theQuery = new BasicDBObject("_id", ID );
                DBObject result = col.findOne(theQuery);

                if(result == null){
                    //If not add as new building
                    Tag tags = new Tag(tag);

                    DBObject doc = createDBObject(tags);
                    col.insert(doc);
                    JOptionPane.showMessageDialog(null, "Added Successfully");
                    tagTxt.setText(null);

                }else{
                    //if yes Edit existing building
                    BasicDBObject query = new BasicDBObject();
                    query.put("_id", ID);

                    BasicDBObject newDocument = new BasicDBObject();
                    newDocument.put("tag", tag);

                    BasicDBObject updateObject = new BasicDBObject();
                    updateObject.put("$set", newDocument);

                    MyDb.getCollection("Tag").update(query, updateObject);
                    JOptionPane.showMessageDialog(null, "Updated Succesfully!");
                    tagTxt.setText(null);

                }
                displayTable1();
            }
        } catch (Exception e)
        {
            JOptionPane.showMessageDialog(null, "Insertion Failed  please Fill Details to add!" + e.toString());

        }

    }//GEN-LAST:event_EditButtonActionPerformed

    private void RemoveButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RemoveButtonActionPerformed
        // TODO add your handling code here:
        int row = tagList.getSelectedRow();
        ID = (ObjectId) tagList.getModel().getValueAt(row, 0);

        DB MyDb = null;
        try
        {
            MyDb = DBManager.getDatabase();
        }
        catch (UnknownHostException e)
        {
            JOptionPane.showMessageDialog(null, "Error When Connecting to DB" + e);
        }
        DBCollection col = MyDb.getCollection("Tag");
        BasicDBObject theQuery = new BasicDBObject();
        theQuery.put("_id", ID);
        WriteResult result = col.remove(theQuery);
        JOptionPane.showMessageDialog(null, "Deleted Succesfully!");
        tagTxt.setText(null);

        displayTable1();

    }//GEN-LAST:event_RemoveButtonActionPerformed

    private void AddYearButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AddYearButtonActionPerformed
        // TODO add your handling code here:
        this.setVisible(false);

        new AddYear().setVisible(true);
    }//GEN-LAST:event_AddYearButtonActionPerformed

    private void CreateSubGrpButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CreateSubGrpButtonActionPerformed
        // TODO add your handling code here:
        this.setVisible(false);
        new GenerateSubGrpID().setVisible(true);
    }//GEN-LAST:event_CreateSubGrpButtonActionPerformed

    private void CreateGrpButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CreateGrpButtonActionPerformed
        // TODO add your handling code here:
        this.setVisible(false);
        new GenerateGrpID().setVisible(true);
    }//GEN-LAST:event_CreateGrpButtonActionPerformed


    private void displayTable1(){
          DB MyDb = null;
        DBCursor cursor = null;
        try {
            MyDb = DBManager.getDatabase();
            DBCollection coll = MyDb.getCollection("Tag");
            cursor = coll.find();

            String[] columnNames = {"ID","Tag" };
            DefaultTableModel model = new DefaultTableModel(columnNames, 0);
           

            while(cursor.hasNext()) {
                DBObject obj = cursor.next();
            
                String t1 = (String)obj.get("tag");
               
                ObjectId id = (ObjectId)obj.get("_id");
                model.addRow(new Object[] {id, t1 });
            }
            tagList.setModel(model);
              tagList.getColumnModel().getColumn(0).setMinWidth(0);
             tagList.getColumnModel().getColumn(0).setMaxWidth(0);
            cursor.close(); 
            //MyDb.close();
        }catch(Exception e){
            System.err.println("Error in displayTable() method === "+e);
        }
      
    }
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton AddButton;
    private javax.swing.JButton AddYearButton;
    private javax.swing.JButton CreateGrpButton;
    private javax.swing.JButton CreateSubGrpButton;
    private javax.swing.JButton EditButton;
    private javax.swing.JButton RemoveButton;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tagList;
    private javax.swing.JTextField tagTxt;
    // End of variables declaration//GEN-END:variables

  private DBObject createDBObject(Tag tag) {
       BasicDBObjectBuilder docBuilder = BasicDBObjectBuilder.start();
           docBuilder.append("tag", tag.tag);
           return docBuilder.get();
    }
}
